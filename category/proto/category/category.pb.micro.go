// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: category.proto

package category

import (
	fmt "fmt"
	proto "google.golang.org/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "go-micro.dev/v4/api"
	client "go-micro.dev/v4/client"
	server "go-micro.dev/v4/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for Category service

func NewCategoryEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for Category service

type CategoryService interface {
	CreateCategory(ctx context.Context, in *CategoryReq, opts ...client.CallOption) (*CreateCategoryRes, error)
	UpdateCategory(ctx context.Context, in *CategoryReq, opts ...client.CallOption) (*UpdateCategoryRes, error)
	DeleteCategory(ctx context.Context, in *DeleteCategoryReq, opts ...client.CallOption) (*DeleteCategoryRes, error)
	FindCategoryById(ctx context.Context, in *FindByIdReq, opts ...client.CallOption) (*CategoryRes, error)
	FindCategoryByName(ctx context.Context, in *FindByNameReq, opts ...client.CallOption) (*CategoryRes, error)
	FindAllCategory(ctx context.Context, in *FindAllReq, opts ...client.CallOption) (*FindAllRes, error)
}

type categoryService struct {
	c    client.Client
	name string
}

func NewCategoryService(name string, c client.Client) CategoryService {
	return &categoryService{
		c:    c,
		name: name,
	}
}

func (c *categoryService) CreateCategory(ctx context.Context, in *CategoryReq, opts ...client.CallOption) (*CreateCategoryRes, error) {
	req := c.c.NewRequest(c.name, "Category.CreateCategory", in)
	out := new(CreateCategoryRes)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *categoryService) UpdateCategory(ctx context.Context, in *CategoryReq, opts ...client.CallOption) (*UpdateCategoryRes, error) {
	req := c.c.NewRequest(c.name, "Category.UpdateCategory", in)
	out := new(UpdateCategoryRes)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *categoryService) DeleteCategory(ctx context.Context, in *DeleteCategoryReq, opts ...client.CallOption) (*DeleteCategoryRes, error) {
	req := c.c.NewRequest(c.name, "Category.DeleteCategory", in)
	out := new(DeleteCategoryRes)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *categoryService) FindCategoryById(ctx context.Context, in *FindByIdReq, opts ...client.CallOption) (*CategoryRes, error) {
	req := c.c.NewRequest(c.name, "Category.FindCategoryById", in)
	out := new(CategoryRes)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *categoryService) FindCategoryByName(ctx context.Context, in *FindByNameReq, opts ...client.CallOption) (*CategoryRes, error) {
	req := c.c.NewRequest(c.name, "Category.FindCategoryByName", in)
	out := new(CategoryRes)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *categoryService) FindAllCategory(ctx context.Context, in *FindAllReq, opts ...client.CallOption) (*FindAllRes, error) {
	req := c.c.NewRequest(c.name, "Category.FindAllCategory", in)
	out := new(FindAllRes)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Category service

type CategoryHandler interface {
	CreateCategory(context.Context, *CategoryReq, *CreateCategoryRes) error
	UpdateCategory(context.Context, *CategoryReq, *UpdateCategoryRes) error
	DeleteCategory(context.Context, *DeleteCategoryReq, *DeleteCategoryRes) error
	FindCategoryById(context.Context, *FindByIdReq, *CategoryRes) error
	FindCategoryByName(context.Context, *FindByNameReq, *CategoryRes) error
	FindAllCategory(context.Context, *FindAllReq, *FindAllRes) error
}

func RegisterCategoryHandler(s server.Server, hdlr CategoryHandler, opts ...server.HandlerOption) error {
	type category interface {
		CreateCategory(ctx context.Context, in *CategoryReq, out *CreateCategoryRes) error
		UpdateCategory(ctx context.Context, in *CategoryReq, out *UpdateCategoryRes) error
		DeleteCategory(ctx context.Context, in *DeleteCategoryReq, out *DeleteCategoryRes) error
		FindCategoryById(ctx context.Context, in *FindByIdReq, out *CategoryRes) error
		FindCategoryByName(ctx context.Context, in *FindByNameReq, out *CategoryRes) error
		FindAllCategory(ctx context.Context, in *FindAllReq, out *FindAllRes) error
	}
	type Category struct {
		category
	}
	h := &categoryHandler{hdlr}
	return s.Handle(s.NewHandler(&Category{h}, opts...))
}

type categoryHandler struct {
	CategoryHandler
}

func (h *categoryHandler) CreateCategory(ctx context.Context, in *CategoryReq, out *CreateCategoryRes) error {
	return h.CategoryHandler.CreateCategory(ctx, in, out)
}

func (h *categoryHandler) UpdateCategory(ctx context.Context, in *CategoryReq, out *UpdateCategoryRes) error {
	return h.CategoryHandler.UpdateCategory(ctx, in, out)
}

func (h *categoryHandler) DeleteCategory(ctx context.Context, in *DeleteCategoryReq, out *DeleteCategoryRes) error {
	return h.CategoryHandler.DeleteCategory(ctx, in, out)
}

func (h *categoryHandler) FindCategoryById(ctx context.Context, in *FindByIdReq, out *CategoryRes) error {
	return h.CategoryHandler.FindCategoryById(ctx, in, out)
}

func (h *categoryHandler) FindCategoryByName(ctx context.Context, in *FindByNameReq, out *CategoryRes) error {
	return h.CategoryHandler.FindCategoryByName(ctx, in, out)
}

func (h *categoryHandler) FindAllCategory(ctx context.Context, in *FindAllReq, out *FindAllRes) error {
	return h.CategoryHandler.FindAllCategory(ctx, in, out)
}
